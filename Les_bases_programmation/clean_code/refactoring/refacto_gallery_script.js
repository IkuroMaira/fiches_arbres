const fetchData = async (endpoint) => {    try {        const response = await fetch(`https://jsonplaceholder.typicode.com/${endpoint}`);        const data = await response.json();        // console.log(data);        return data    } catch (error) {        console.error("Une erreur est survenue lors de l'appel à l'API:", error);    }}const gallery = async () => {    const photos = await fetchData('photos');    // console.log(photos);    photosDisplay(photos);}const photosDisplay = (dataPhotos) => {    dataPhotos.slice(0, 50).forEach(photo => {                const gallery = document.getElementById('gallery');                const photoDiv = document.createElement('div');                photoDiv.className = 'photo';                const img = document.createElement('img');                img.src = photo.thumbnailUrl;                img.alt = photo.title;                const title = document.createElement('div');                title.className = 'photo-title';                title.textContent = photo.title;                photoDiv.appendChild(img);                photoDiv.appendChild(title);                gallery.appendChild(photoDiv);            });}// Option pour améliorer la gestion et la lisibilité dans le DOM// const createElementDiv = () => {//     // createElementDiv//     // className////     // Faire uen boucle pour les//     for (const argument of arguments) {////     }// }// Pourquoi on ne peut afficher dans la console l'appelle dans la variable.gallery();// De la modularité => ça veut dire on va associer un role spécifique à une fonction// 1. Sépare bien les fichiers// 2. Rendre le code très modulaire// 3. Bien nommer les fonction et les variable